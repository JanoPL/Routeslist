name: Net RoutesList - Pull Request Validation

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches: [ master, main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' #semantic version format

  workflow_dispatch: 
    inputs: 
      verbosity: 
        description: verbose level
        default: "minimal"
        type: choice
        options:
          - quiet
          - minimal
          - normal
          - detailed
          - diagnostic
  
jobs:
  build-windows:
    name: Windows Build & Test
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [ Release ]
        dotnet-version: [ 'netcoreapp3.1', 'net5.0', 'net6.0', 'net7.0', 'net8.0', 'net9.0' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-${{ github.workflow }}-${{ matrix.configuration }}-${{ matrix.dotnet-version }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.workflow }}-${{ matrix.configuration }}-${{ matrix.dotnet-version }}-nuget-${{ hashFiles('**/packages.lock.json') }}
    
      - name: Setup .NET SDK environments
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            3.1.x
            5.0.x
            6.0.x
            7.0.x
            8.0.x
            9.0.x
            9.0.x
      
      - name: Restore NuGet dependencies
        run: dotnet restore
      
      - name: Build solution
        run: dotnet build --configuration ${{ matrix.configuration }} --no-restore

      - name: Run unit tests
        run: dotnet test --no-restore --verbosity ${{ github.event.inputs.verbosity || 'minimal' }} --configuration ${{ matrix.configuration }} -f ${{ matrix.dotnet-version }}
  
  build-linux:
    name: Linux Build & Code Coverage
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        configuration: [ Release ]
        dotnet-version: [ 'netcoreapp3.1', 'net5.0', 'net6.0', 'net7.0', 'net8.0', 'net9.0' ]
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-${{ github.workflow }}-${{ matrix.configuration }}-${{ matrix.dotnet-version }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.workflow }}-${{ matrix.configuration }}-${{ matrix.dotnet-version }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      
      - name: Setup .NET SDK environments
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            3.1.x
            5.0.x
            6.0.x
            7.0.x
            8.0.x
            9.0.x
    
      - name: Restore NuGet dependencies
        run: dotnet restore
      
      - name: Build solution
        run: dotnet build --configuration ${{ matrix.configuration }} --no-restore
      
      - name: Run tests with code coverage
        run: dotnet test --no-restore --verbosity ${{ github.event.inputs.verbosity || 'minimal' }} --configuration ${{ matrix.configuration }} -f ${{ matrix.dotnet-version }} --collect "XPlat Code Coverage"

      - name: Collect and prepare code coverage data
        if: ${{ matrix.dotnet-version == 'net9.0' }}
        run: |
          mkdir -p ${{ github.workspace }}/coverage
          for i in {1..5}; do
            source=""
            case $i in
              1) source="tests/UnitTests/TestResults" ;;
              2) source="tests/Test.WebApplication.factory/TestResults" ;;
              3) source="tests/RouteList.IntegrationTest/TestResults" ;;
              4) source="tests/RoutesList.Integration.Razor/TestResults" ;;
              5) source="tests/RoutesLIst.Integration.Blazor/TestResults" ;;
            esac
            cp ${{ github.workspace }}/$source/**/coverage.cobertura.xml ${{ github.workspace }}/coverage/coverage$i.xml || echo "Warning: Coverage file $i not found"
          done
          ls ${{ github.workspace }}/coverage || echo "No coverage files found"

      - name: Submit code coverage to Codacy
        if: ${{ matrix.dotnet-version == 'net9.0' }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage1.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage2.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage3.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage4.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage5.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura

      - name: Finalize Codacy coverage report
        if: ${{ matrix.dotnet-version == 'net9.0' }}
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) final -t ${{ secrets.CODACY_PROJECT_SECRET }}

      - name: Collect and prepare code coverage data
        if: ${{ matrix.dotnet-version == 'net9.0' }}
        run: |
          mkdir -p ${{ github.workspace }}/coverage
          for i in {1..5}; do
            source=""
            case $i in
              1) source="tests/UnitTests/TestResults" ;;
              2) source="tests/Test.WebApplication.factory/TestResults" ;;
              3) source="tests/RouteList.IntegrationTest/TestResults" ;;
              4) source="tests/RoutesList.Integration.Razor/TestResults" ;;
              5) source="tests/RoutesLIst.Integration.Blazor/TestResults" ;;
            esac
            cp ${{ github.workspace }}/$source/**/coverage.cobertura.xml ${{ github.workspace }}/coverage/coverage$i.xml || echo "Warning: Coverage file $i not found"
          done
          ls ${{ github.workspace }}/coverage || echo "No coverage files found"

      - name: Submit code coverage to Codacy
        if: ${{ matrix.dotnet-version == 'net9.0' }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage1.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage2.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage3.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage4.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage5.xml -t ${{ secrets.CODACY_PROJECT_SECRET }} --partial --language CSharp --force-coverage-parser Cobertura

      - name: Finalize Codacy coverage report
        if: ${{ matrix.dotnet-version == 'net9.0' }}
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) final -t ${{ secrets.CODACY_PROJECT_SECRET }}