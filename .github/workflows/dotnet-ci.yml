name: Net RoutesList CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches: [ master, main, dev ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' #semantic version format
  workflow_dispatch:
    inputs:
      verbosity:
        description: verbose level
        type: choice
        default: "minimal"
        options:
          - quiet
          - minimal
          - normal
          - detailed
          - diagnostic

jobs:
  report-coverage:
    runs-on: ubuntu-latest
    needs:
      - build-linux
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: ${{ github.workspace }}/coverage
          
      - name: list coverage files
        run: |
          ls ${{ github.workspace }} || echo "No coverage files found"

      - name: Send coverage reports to Codacy
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage1.xml -t ${{ secrets.CODACY_PROJECT_TOKEN }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage2.xml -t ${{ secrets.CODACY_PROJECT_TOKEN }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage3.xml -t ${{ secrets.CODACY_PROJECT_TOKEN }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage4.xml -t ${{ secrets.CODACY_PROJECT_TOKEN }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage5.xml -t ${{ secrets.CODACY_PROJECT_TOKEN }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage6.xml -t ${{ secrets.CODACY_PROJECT_TOKEN }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage7.xml -t ${{ secrets.CODACY_PROJECT_TOKEN }} --partial --language CSharp --force-coverage-parser Cobertura
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ github.workspace }}/coverage/coverage8.xml -t ${{ secrets.CODACY_PROJECT_TOKEN }} --partial --language CSharp --force-coverage-parser Cobertura

      - name: Finalize codacy reporter
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) final -t ${{ secrets.CODACY_PROJECT_TOKEN }}
  
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        configuration: [ 'Debug', 'Release' ]
        dotnet-version: [ 'net6.0', 'net7.0', 'net8.0', 'net9.0' ]
    steps: 
      - uses: actions/checkout@v5

      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-${{ github.workflow }}-${{ matrix.configuration }}-${{ matrix.dotnet-version }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.workflow }}-${{ matrix.configuration }}-${{ matrix.dotnet-version }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      
      - name: Set up Homebrew
        if: github.event_name == 'push'
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Export environment variables
        if: github.event_name == 'push'
        run: |
            export PATH=/usr/local/opt/openssl@3/bin:/usr/local/bin:$PATH
            export LDFLAGS="-L/usr/local/opt/openssl@3/lib"
            export CPPFLAGS="-I/usr/local/opt/openssl@3/include"
            export PKG_CONFIG_PATH="/usr/local/opt/openssl@3/lib/pkgconfig"
            export DYLD_LIBRARY_PATH="/usr/local/opt/openssl@3/lib:$DYLD_LIBRARY_PATH"

      - name: Setup .NET Core SDK net6.0
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            6.0.x
            7.0.x
            8.0.x
            9.0.x

      - name: Install dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --configuration ${{ matrix.configuration }} --no-restore

      - name: Test
        if: ${{ matrix.dotnet-version != 'net9.0' }}
        run: dotnet test --no-restore --configuration ${{ matrix.configuration }} -f ${{ matrix.dotnet-version }}

      - name: Test
        if: ${{ matrix.dotnet-version == 'net9.0' }}
        run: dotnet test --no-restore --verbosity minimal --configuration ${{ matrix.configuration }} -f ${{ matrix.dotnet-version }} --collect "XPlat Code Coverage"

      - name: Rename and move Cobertura test to ${{ github.workspace }}/coverage directory
        if: ${{ matrix.dotnet-version == 'net9.0' && matrix.configuration == 'Release' }}
        run: |
          mkdir -p ${{ github.workspace }}/coverage
          for i in {1..8}; do
            source=""
            case $i in
              1) source="tests/UnitTests/TestResults" ;;
              2) source="tests/Test.WebApplication.factory/TestResults" ;;
              3) source="tests/RouteList.IntegrationTest/TestResults" ;;
              4) source="tests/RoutesList.Integration.Razor/TestResults" ;;
              5) source="tests/RoutesLIst.Integration.Blazor/TestResults" ;;
              6) source="tests/RoutesList.Integration.RazorPages/TestResults" ;;
              7) source="tests/RoutesList.Tests.Services/TestResults" ;;
              8) source="tests/Test.WebApplication.factory/TestResults" ;;
            esac
            cp ${{ github.workspace }}/$source/**/coverage.cobertura.xml ${{ github.workspace }}/coverage/coverage$i.xml || echo "Warning: Coverage file $i not found"
          done
          ls ${{ github.workspace }}/coverage || echo "No coverage files found"

      - name: Upload coverage report
        if: ${{ matrix.dotnet-version == 'net9.0' && matrix.configuration == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ${{ github.workspace }}/coverage